y <- data.frame (a = 1, b = "string")
dput(y)
dput(y, file = "y.R")
new.y <- dget("y.R")
new.y
x <- "foo"
y <- data.frame (s = 1, b = "a")
dump(c("x", "y"), file = "data.R")
rm(x, y)
source("data.R")
x <- "foo"
y <- data.frame (s = 1, b = "a")
dump(c("x", "y"), file = "data.R")
rm(x, y)
source("data.R")
str(file)
con <- gzfile("words.gz")
x <- readLines(con, 10)
x
con <- url("https://www.nabler.com","r")
x <- readLines(con)
head(x)
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[1]
x[2]
x[1:4]
x[ x > "a"]
u <- x > "a"
u
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x$bar
x[["bar"]]
x["bar"]
x[c(1,3)]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,3)]
x[[name]]
x$name
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
name <- "foo"
x[[name]]
x$name
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
x[1,2]
x[c(1,2)]
x <- matrix(1:6, 2, 3)
x[1,2]
x[2,1]
x[1,] # Give entirety of 1st row
x[,2] # Give entirety of 2nd column
x[1,2] # Get an element as vector
x[1,2, drop = FALSE] # Get a single element matrix
x[1, , drop = FALSE] # Get a row as matrix
x <- list(aardvark = 1:5)
x$a # Gets the element whose name partially matches
x[["a"]] # Does not return results as the default is set to exact match
x[["a", exact = FALSE]]
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(X)
x[!bad]
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x[!bad]
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x[!bad]
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
# Note that the NAs are at the same positions in the above 2 matrices
good <- complete.cases(x, y) # Identifies which positions in the vectors are not NA
x[good] # Returns non-NA values in x
y[good] # Returns non-NA values in y
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", NA , "c", "d", NA, "f")
# Note that the NAs are at the same positions in the above 2 matrices
good <- complete.cases(x, y) # Identifies which positions in the vectors are not NA
x[good] # Returns non-NA values in x
y[good]
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", NA , "c", "d", NA, "f")
# Note that the NAs are at the same positions in the above 2 matrices
good <- complete.cases(x, y) # Identifies which positions in the vectors are not NA
good
x[good] # Returns non-NA values in x
y[good]
airquality[1:6]
# Subsetting missing values out
airquality[1:6, ]
good <- complete.cases(airquality)
airquality[good, ][1:6, ]
x + y # Adds each element lokp 06yo77767py--p60u 8
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
x * y # Will carring out element wise multiplication. Same applies for other operators
x %*% y
x<- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
classx[[2]]
class(x[[2]])
x <- 1:4
y <- 2:3
x+y
class(x+y)
x <- c(17, 14, 4, 5, 13, 12, 10)
gt10 <- x[x > 10]
x[gt10 = 4]
x[x >10] <- 4
x
x <- read.csv("quiz1_data_hw1_data.csv")
head(x)
x[2,]
x[3,]
head(x, 2)
rows(x)
nrow(x)
x[152:153,]
x[47,]
x[["Ozone"]] == NA
x("Ozone") == NA
x$Ozone" == NA
x$Ozone == NA
y <- x$Ozone == NA
x[!y]
y <- is.na(x$Ozone)
x[!y]
y <- is.na(x$Ozone)
x[["Ozone"!y]]
x[["Ozone"]]
x[["Ozone"!=NA]]
y <- complete.cases(x)
x[y]
y <- x[1,]
y
y <- x[,1]
y
Ozonecol <- x[,1]
complete.cases(Ozonecol)
Ozonecol[complete.cases(Ozonecol)]
len(Ozonecol[complete.cases(Ozonecol)])
length(Ozonecol[complete.cases(Ozonecol)])
length(Ozonecol[!complete.cases(Ozonecol)])
average(Ozonecol[complete.cases(Ozonecol)])
mean(Ozonecol[complete.cases(Ozonecol)])
head(x)
x[$Ozone > 31, $Temp > 90]
x["Ozone" > 31, "Temp" > 90]
x[["Ozone" > 31, "Temp" > 90]]
x["Ozone" > 31, "Temp" > 90]
y <- x["Ozone" > 31]
y
y <- x(x["Ozone" > 31])
y <- x[$Ozone > 31]
y <- x[["Ozone"] > 31]
x[(x[,1] > 31),]
x[(x["Ozone"] > 31),(x[,])]
x[(x[["Ozone"]] > 31),(x[,])]
y <- x[(x[,1] > 31),(x[,])]
y <- x[(x[,1] > 31)]
y <- x[(x[,1] > 31),]
y <- y[(y[,4] > 90),]
y
mean(x[["Solar.R"]])
mean(y[["Solar.R"]])
mean(y[["Solar.R"]], [["Solar.R"]] != NA)
z <- is.na(x[["Solar.R"]])
z
mean(x[["Solar.R" !z]])
mean(x[["Solar.R" != z]])
x["Ozone" > 31 & "Temp" > 91]
x[["Ozone" > 31 & "Temp" > 91]]
x[["Ozone" > 31 && "Temp" > 91]]
subset(x, Ozone > 31, Temp > 90)
subset(x, Ozone > 31 & Temp > 90)
z <- subset(x, Ozone > 31 & Temp > 90)
mean(z[[Solar.R]])
mean(z$Solar.R)
mean(z$Temp, Month == 6)
mean(z$Temp, z$Month == 6)
z <- x[x$Month == 6]
z <- x[[Month == 6]]
z <- x[x[Month == 6]]
z <- x[x$Month == 6]
x
z <- subset(x, Month = 6)
z
z <- subset(x, Month == 6)
z
mean(z$Temp)
z <- subset(x, Month == 5)
max(z$Ozone)
z
z[z[!is.na(z$Ozone)]]
z[is.na(z$Ozone)]
is.na(z$Ozone)
z[!bad]
z[bad]
z[z$Ozone!=bad]
z <- subset(x, Month == 5)
z
max(complete.cases(z$Ozone))
max(z$Ozone, complete.cases(z$Ozone))
z <- complete.cases(z$Ozone)
z
z <- subset(x, Month == 5)
z <- z[complete.cases(z$Ozone)]
z <- subset(x, Month == 5)
goodOzone <- complete.cases(z$Ozone)]
z <- subset(x, Month == 5)
goodOzone <- complete.cases(z$Ozone)
z <- subset(x, Month == 5)
z <- z$Ozone
z
max(z)
max(good.cases(z)
max(good.cases(z))
max(complete.cases(z))
z <- subset(x, Month == 5)
z <- z$Ozone
z <- z[complete.cases(z)]
max(z)
swirl()
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
t
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z* 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c1, 2, 3, 4) + C(0, 10, 100)
c(1, 2, 3, 4) + C(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z* 2 + 1000
my_div
getwd('')
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd('')
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", "folder1", "folder2")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
old.dir
setwd(old.dir)
search()
f <- function (x, y) {
x ^ 2 + y / z
}
f(9, 10)
f <- function (x, y) {
x^2 + y / z
}
f(9, 10)
f <- function (x, y) {
x^2 + y / z
}
f(9, 10)
