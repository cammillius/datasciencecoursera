settingwd <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata") {
setwd("C:/Users/CAMMILLIUS R J/Google Drive")
getwd()
setwd(directory)
getwd()
}
settingwd(directory)
setwd("C:/Users/CAMMILLIUS R J/Google Drive")
getwd()
setwd("C:/Users/CAMMILLIUS R J/Google Drive")
getwd()
settingwd <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata") {
setwd(directory)
}
getwd()
settingwd <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata") {
setwd(directory)
}
settingwd(directory)
getwd()
?read.csv
sample <- read.csv(001.csv)
sample <- read.csv(001)
sample <- read.csv("001.csv")
file1 <- "001.csv"
sample <- read.csv(file1)
file1 <- "001"
sample <- read.csv(file1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
total = 0
observations = 0
for (i in id)
{
if (i < 10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
observations = observations + nrow(data)
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
setwd("..")
return (total/observations)
}
getwd()
pollutantmean("C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata", "sulfate", 1:332)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
getwd()
pollutantmean("specdata", "nitrate", 70:72)
getwd()
complete <- function(directory, id = 1:332) {
dataframe = NULL
setwd(directory)
for (i in id)
{
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
data = as.matrix(data)
dataframe = rbind(dataframe, c(i,nrow(data)))
}
setwd("..")
dataframe = data.frame(dataframe)
names(dataframe) = c('id', 'nobs')
return (dataframe)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
corr <- function(directory, threshold = 0) {
setwd(directory)
correlationVector = NULL
for (i in 1:332)
{
if (i <10) {
data <- read.csv(
paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else if (i>=10 & i<100) {
data <- read.csv(
paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(
paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
if (nrow(data) > threshold) {
correlationVector = c(correlationVector, cor(data[,2], data[,3]))
}
}
setwd("..")
return (correlationVector)
}
cr <- corr("specdata", 150)
head(cr); summary(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
q()
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(10, 5))
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(100, 5))
x <- list(a = 1:4, b = norm(10), c = rnorm(20, 1), d = rnorm(100, 5))
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- 1:4
lapply (x, runif)
runif(2)
?runif
lapply (x, runif, min = 1, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[, 1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
mean(x)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean) # Gives mean of all 10 columns
apply(x, 1, sum) # Gives sum of all 20 rows
# Use apply to calculate the 25th and 75th %s of quantiles for rows:
x < matrix(rnorm(200), 20, 10)
x
apply(x, qantile, probs = c(0.25, 0.75))
apply(x, 1, qantile, probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
# Instead of:
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
# This is better using mapply:
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:1, 2)
# Use:
mapply(noise, 1:5, 1:5, 2)
colmean <- function(mat, remNA = TRUE) {
colnum <- ncol(mat) # Find number of columns
matmean <- numeric(colnum) # Create a numeric vector equal to number of columns
for(i in 1:colnum) {
matmean[i] <- mean(mat[, i], na.rm = remNA) # Loop through each column and get mean. If NAs are found, remove them.
}
matmean
}
colmean(airquality)
airquality[good, ][1:6, ]
airquality[1:6, ] # Contains some rows with NA values
good <- complete.cases(airquality)
airquality[good, ][1:6, ]
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
# The above example without simplification:
tapply(x, f, mean, simplify = FALSE)
# Example to find group ranges:
tapply(x, f, range)
# Example to find group ranges:
tapply(x, f, range, simplify = TRUE)
# Example to find group ranges:
tapply(x, f, range)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
?gl
# It is commont to use lapply and split:
lapply(split(x, f))
# It is commont to use lapply and split:
lapply(split(x, f), mean)
# Splitting a dataframe
library(datasets)
head(airquality)
head(airquality, DESC = $Wind)
head(airquality, DESC = ,Wind)
head(airquality)
head(airquality)
s <- airquality(airquality, airquality$Month)
s <- splitairquality, airquality$Month)
s <- split(airquality$Month)
head(airquality)
s <- split(airquality$Month)
s <- split(airquality, airquality$Month)
s
lapply(s, function(X) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
# Using sapply will return a matrix as the output is combos of 3:
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
# Removing NA values using sapply:
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
# Splitting on more than one level:
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
?interaction
# Interactions can create empty levels:
str(split(x, list(f1, f2)))
# The drop argument helps remove the empty levels:
str(split(x, list(f1, f2), drop = TRUE))
log(-1)
?invisible
printmessage(0)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(0)
print("x is less than or equal to zero")
printmessage(1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
x
}
printmessage(5)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(5)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x) # Returns the value but not shown as output on screen.
}
printmessage(5)
printmessage(NA)
printmessage(1)
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(NA)
printmessage2(NA)
x <- log(-1)
printmessage2(x)
mean(x)
mean(x)
traceback()
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
n
options(error = recover)
read.csv("nosuchfile")
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_map
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply (unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, nueric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
data(iris)
data(iris)
head(iris)
# There will be an object called 'iris' in your workspace. In this dataset, what is the mean of 'Sepal.Length' for the species virginica? Please round your answer to the nearest whole number.
# (Only enter the numeric result and nothing else.)
mean(iris$Sepal.Length)
# Q2
# Continuing with the 'iris' dataset from the previous Question, what R code returns a vector of the means of the variables 'Sepal.Length', 'Sepal.Width', 'Petal.Length', and 'Petal.Width'?
class(apply(iris, 2, mean))
# Q2
# Continuing with the 'iris' dataset from the previous Question, what R code returns a vector of the means of the variables 'Sepal.Length', 'Sepal.Width', 'Petal.Length', and 'Petal.Width'?
class(apply(iris[, 1:4], 2, mean))
apply(iris[, 1:4], 2, mean))
apply(iris[, 1:4], 2, mean)
test <- apply(iris[, 1:4], 2, mean)
class(test)
type(test)
class(test)
test <- apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
# Q2
# Continuing with the 'iris' dataset from the previous Question, what R code returns a vector of the means of the variables 'Sepal.Length', 'Sepal.Width', 'Petal.Length', and 'Petal.Width'?
apply(iris[, 1:4], 2, mean)
data(mtcars)
# There will be an object names 'mtcars' in your workspace. You can find some information about the dataset by running
?mtcars
# How can one calculate the average miles per gallon (mpg) by number of cylinders in the car (cyl)? Select all that apply.
# Answer:
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, mtcars$cyl, unique)
sapply(mtcars$cyl, unique)
tapply(mtcars$cyl, unique)
lapply(mtcars$cyl, unique)
sapply(mtcars$cyl, unique)
# How can one calculate the average miles per gallon (mpg) by number of cylinders in the car (cyl)? Select all that apply.
# Answer:
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl, mean))
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl(4), mean)
tapply(mtcars$hp, mtcars$cyl(,4), mean)
split(mtcars, mtcars$cyl)
tt=tapply( mtcars$hp, mtcars$cyl, FUN = mean)
print(tt[4])
tt=tapply( mtcars$hp, mtcars$cyl, FUN = mean, na.rm = FALSE)
print(tt[4])
tapply(mtcars$hp, mtcars$cyl, mean)
# Q4
# Continuing with the 'mtcars' dataset from the previous Question, what is the absolute difference between the average horsepower of 4-cylinder cars and the average horsepower of 8-cylinder cars?
S <- tapply(mtcars$hp, mtcars$cyl, mean)
S
# Q4
# Continuing with the 'mtcars' dataset from the previous Question, what is the absolute difference between the average horsepower of 4-cylinder cars and the average horsepower of 8-cylinder cars?
s <- tapply(mtcars$hp, mtcars$cyl, mean)
class(s)
s
s(s$4)
s(s$4)
s(,1)
s(1)
s[1]
print(s[3] - s[1])
s[3] - s[1]
# Q5
# If you run
debug(ls)
# what happens when you next call the 'ls' function?
ls(5)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
# There will be an object called 'iris' in your workspace. In this dataset, what is the mean of 'Sepal.Length' for the species virginica? Please round your answer to the nearest whole number.
# (Only enter the numeric result and nothing else.)
# Answer:
mean(iris$Sepal.Length)
# There will be an object called 'iris' in your workspace. In this dataset, what is the mean of 'Sepal.Length' for the species virginica? Please round your answer to the nearest whole number.
# (Only enter the numeric result and nothing else.)
# Answer:
mean(iris$Sepal.Length, rm.na = TRUE)
q
OK()
