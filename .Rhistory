ggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +
geom_point() +
expand_limits(y = 0)
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
ggplot(by_continent_2007, aes(x = medianGdpPercap, y = medianLifeExp, color = continent)) +
geom_point()
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
install.packages("googleAnalyticsR")
library(googleAnalyticsR)
ga_auth()
my_accounts <- google_analytics_account_list()
View(my_accounts)
my_id <- 56037355
start_date <- "2018-08-01"
end_date <- "2018-08-31"
df2 <- google_analytics_4(my_id,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date"))
df2 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date"))
View(df)
View(df2)
install.packages("RGA")
?RGA
authorize()
rga.open(instance = "ga")
install_github("rga", "skardhamar")
install.packages("devtools")
library(devtools)
install_github("rga", "skardhamar")
library(rga)
??rga
ga$getData(xxx,
start.date = "2015-03-30",
end.date = "2015-03-31",
metrics = "ga:totalEvents",
dimensions = "ga:date,ga:customVarValue4,ga:eventCategory,ga:eventAction,ga:eventLabel",
sort = "",
filters = "ga:deviceCategory==desktop",
segment = "",
,batch = TRUE, walk = TRUE
)
ga_data <- google_analytics_4(viewId = "[your view ID]",
date_range = c(Sys.Date()-7, Sys.Date()-1),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE)
View(ga_data)
?google_analytics
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
anti_sample_batches = "1")
library(googleAnalyticsR)
start_date <- "2018-08-31"
end_date <- "2018-08-01"
my_id <- 56037355
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
View(ga_data)
start_date <- "2018-08-01"
end_date <- "2018-08-31"
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
View(ga_data)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date", "",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
segments = NULL,
anti_sample_batches = 1)
library(googleAnalyticsR)
start_date <- "2018-08-01"
end_date <- "2018-08-31"
my_id <- 56037355
ga_data1 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data2 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
segments = NULL,
anti_sample_batches = 1)
View(ga_data1)
View(ga_data2)
install.packages("googleAuthR")
install.packages("googleAuthR")
install.packages("googleAuthR")
q()
install.packages("tensor")
remove.packages("tensor", lib="~/R/win-library/3.5")
devtools::install_github("rstudio/keras")
q()
?make_ga_4_req
??make_ga_4_req
today()
Sys.Date()
Sys.Date()-1
?date_range
??date_range
q()
library(swirl)
swirl()
data(cars)
??cars
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars, x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(Speed = cars$speed, y = cars$dist)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpt ~ cyl, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
# setwd("D:/Study&Learning/Coursera/DataScience")
outcome <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
getwd()
setwd("D:/Study&Learning/Coursera/DataScience")
# setwd("D:/Study&Learning/Coursera/DataScience")
setwd("C:/All-Files/Study&Learning/Coursera/DataScience")
getwd()
# setwd("D:/Study&Learning/Coursera/DataScience")
# setwd("C:/All-Files/Study&Learning/Coursera/DataScience")
outcome <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
state <- "state"
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
lowest
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
lowest
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
View(lowest)
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
? order
statesubset <- order(statesubset, statesubset$Hospital.Name)
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
statesubset <- order(statesubset, statesubset$Hospital.Name)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
statesubset <- order(statesubset, statesubset$Hospital.Name)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
statesubset <- subset(data, State == state)
statesubset <- sort(statesubset, statesubset$Hospital.Name, descending = FALSE)
library(dplyr)
? arrange
statesubset <- subset(data, State == state)
arrange(statesubset, order(Hospital.Name))
statesubset <- subset(data, State == state)
statesubset <- arrange(statesubset, order(Hospital.Name))
View(statesubset)
statesubset <- subset(data, State == state)
statesubset <- statesubset %>% arrange(Hostpital.Name)
View(statesubset)
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
statesubset <- statesubset %>% arrange(Hostpital.Name)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
state <- "state"
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
statesubset <- statesubset %>% arrange(statesubset$Hostpital.Name)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
# setwd("D:/Study&Learning/Coursera/DataScience")
# setwd("C:/All-Files/Study&Learning/Coursera/DataScience")
outcome <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
state <- "state"
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
statesubset <- statesubset %>% arrange(statesubset$Hostpital.Name)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
state <- "state"
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
#    statesubset <- statesubset %>% arrange(statesubset$Hostpital.Name)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
best <- function(state, outcome) {
# Read outcome data
data <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
# Check that state and outcome are valid
statelist <- data$State
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if((state %in% statelist && outcome %in% outcomelist) == TRUE) {
print("State and Outcome Found. Continue with program")
statesubset <- subset(data, State == state)
statesubset <- statesubset %>% arrange(statesubset$Hospital.Name)
View(statesubset)
print("Created subset based on State Code")
coltotake <- if(outcome == "heart attack") { # Heart Attack Mortality COlumn - 11
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if(outcome == "heart failure") { # Heart Failure Mortality column - 17
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { # Pneumonia Mortality column - 23
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
print(coltotake)
lowest <- match(min(statesubset[, coltotake]), statesubset[, coltotake])
statesubset[lowest, 2]
}
}
best("AL", "pneumonia")
