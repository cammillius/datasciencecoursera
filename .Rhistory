c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
c ( "Bill", "Gina", "Kelly", "Sean" )
patients <- c ( "Bill", "Gina", "Kelly", "Sean" )
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c""
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
q()
x = 1
if (x > 3) {
y <- "greater than 3"
return y
} else {
y <- "smaller than 3"
return y
}
x = 1
y = 0
if (x > 3) {
y <- "greater than 3"
return y
} else {
y <- "smaller than 3"
return y
}
x = 1
if (x > 3) {
y <- "greater than 3"
} else {
y <- "smaller than 3"
}
y
x = 4
if (x > 3) {
y <- "greater than 3"
} else {
y <- "smaller than 3"
}
y
for (i in 1:10) {
print(i)
}
for (i in 1:4) print(x[i])
x <- c("a", "b", "c", "d")
for (i in 1:4) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(letter)
}
for (i in 1:4) print(x[i])
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
count <- 0
while(count <10) {
print(count)
count <- count + 1
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 & z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { # random walk
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 & z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { # random walk
z <- z + 1
} else {
z <- z - 1
}
}
x0 <- 1
tol <- 1e-8
repeat{
x1 <- computeEstimate()
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
for(i in 1:100) {
if(i <= 20) {
# Skip the first 20 iterations
next
}
print i
}
for(i in 1:100) {
if(i <= 20) {
# Skip the first 20 iterations
next
} else {
print i
}
}
for(i in 1:100) {
if(i <= 20) {
# Skip the first 20 iterations
next
}
print (i)
}
for(i in 1:100) {
if(i <= 20) {
# Skip the first 20 iterations
next
}
return (i)
}
for(i in 1:100) {
if(i <= 20) {
# Skip the first 20 iterations
next
}
return(i)
}
for(i in 1:100) {
if(i <= 20) {
# Skip the first 20 iterations
next
}
print(i)
}
add2 <- func(x, y) {
x + y
}
add2(2, 4)
add2 <- func(x, y) {
x + y
}
add2 <- function(x, y) {
x + y
}
add2(2, 4)
above10 <- function(x) {
for(n in x) {
x[n] > 10
}
}
above10(c(12, 13, 9))
above10 <- function(x) {
for(n in x) {
y <- x[n] > 10
}
print(y)
}
above10(c(12, 13, 9))
above10 <- function(x) {
y <- x > 10
print(x[y])
}
above10(c(12, 13, 9))
above10 <- function(x) {
for(i in x) {
y[i] <- x[i] > 10
}
y <- x > 10
print(x[y])
}
above10(c(12, 13, 9))
above10 <- function(x) {
for(i in x) {
y[i] <- x[i] > 10
}
print(x[y])
}
above10(c(12, 13, 9))
above10 <- function(x) {
y <- x > 10
print(x[y])
}
above10(c(12, 13, 9))
abovethenumber <- function(x, y) {
z <- x > y
print(x[z])
}
abovethenumber(c(10, 20, 30, 40, 50), 20)
colmean <- function(mat) {
colnum <- ncol(mat) # Find number of columns
matmean <- numeric(colnum) # Create a numeric vector equal to number of columns
for(i in 1:nc) {
matmean[i] <- mean(mat[, i])
}
matmean
}
m <- matrix (1:20, 4, 5)
colmean(m)
colmean <- function(mat) {
colnum <- ncol(mat) # Find number of columns
matmean <- numeric(colnum) # Create a numeric vector equal to number of columns
for(i in 1:colnum) {
matmean[i] <- mean(mat[, i])
}
matmean
}
m <- matrix (1:20, 4, 5)
colmean(m)
?numeric
numeric(5)
colmean(airquality)
colmean <- function(mat, remNA = TRUE) {
colnum <- ncol(mat) # Find number of columns
matmean <- numeric(colnum) # Create a numeric vector equal to number of columns
for(i in 1:colnum) {
matmean[i] <- mean(mat[, i], na.rm = remNA) # Loop through each column and get mean
}
matmean
}
colmean(airquality)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(100)
ls(environment(cube))
get("n", environment(cube))
y <- 10
f <- function(x) {
y <- 2
y ^ 2 + g(x)
}
g <- function(x) {
x * y
}
f(3)
g <- function(x) {
a <- 3
x + a + y
}
g(2)
g <- function(x) {
a <- 3
x + a + y
}
g(2)
y <- 3
g(2)
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-01"))
unclass(as.Date("1970-01-02"))
# Dates can be coerced from string using as.POSIXct / as.POSIXlt functions
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p
p$sec # Subset using column name
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
# strptime can change the format of the dates
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
?strptime
class(x)
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
xor(TRUE, TRUE)
xor(4 >= 9, 8 != 8.0)
print
args(print)
"%p%" <- function(first, second){ # Remember to add arguments!
paste("first", " ", "second")
}
"Hello" %p% "you dog!"
"%p%" <- function(first, second){ # Remember to add arguments!
paste(first, " ", second)
}
"Hello" %p% "you dog!"
directory <- c("C:\Users\CAMMILLIUS R J\Google Drive\datasciencecoursera\specdata")
getwd()
directory <- c("C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata")
directory()
directory
pollutantmean <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata", pollutant, id = 1:332) {
setwd <- directory
}
getwd()
pollutantmean <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata", pollutant, id = 1:332) {
setwd() <- directory
}
getwd()
pollutantmean <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata", pollutant, id = 1:332) {
setwd(directory)
}
getwd()
getwd()
setwd("C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata")
setwd()
getwd()
settingwd <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata") {
setwd("C:/Users/CAMMILLIUS R J/Google Drive")
getwd()
setwd(directory)
getwd()
}
settingwd(directory)
setwd("C:/Users/CAMMILLIUS R J/Google Drive")
getwd()
setwd("C:/Users/CAMMILLIUS R J/Google Drive")
getwd()
settingwd <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata") {
setwd(directory)
}
getwd()
settingwd <- function(directory = "C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata") {
setwd(directory)
}
settingwd(directory)
getwd()
?read.csv
sample <- read.csv(001.csv)
sample <- read.csv(001)
sample <- read.csv("001.csv")
file1 <- "001.csv"
sample <- read.csv(file1)
file1 <- "001"
sample <- read.csv(file1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
total = 0
observations = 0
for (i in id)
{
if (i < 10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
observations = observations + nrow(data)
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
setwd("..")
return (total/observations)
}
getwd()
pollutantmean("C:/Users/CAMMILLIUS R J/Google Drive/datasciencecoursera/specdata", "sulfate", 1:332)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
getwd()
pollutantmean("specdata", "nitrate", 70:72)
getwd()
complete <- function(directory, id = 1:332) {
dataframe = NULL
setwd(directory)
for (i in id)
{
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
data = as.matrix(data)
dataframe = rbind(dataframe, c(i,nrow(data)))
}
setwd("..")
dataframe = data.frame(dataframe)
names(dataframe) = c('id', 'nobs')
return (dataframe)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
corr <- function(directory, threshold = 0) {
setwd(directory)
correlationVector = NULL
for (i in 1:332)
{
if (i <10) {
data <- read.csv(
paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else if (i>=10 & i<100) {
data <- read.csv(
paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(
paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
if (nrow(data) > threshold) {
correlationVector = c(correlationVector, cor(data[,2], data[,3]))
}
}
setwd("..")
return (correlationVector)
}
cr <- corr("specdata", 150)
head(cr); summary(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
q()
