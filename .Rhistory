aa <- filter(hflights, UniqueCarrier == "AA")
View(aa)
summarise(aa,
n_flights = n(),
n_canc = sum(Cancelled == 1),
avg_delay = mean(ArrDelay, na.rm = TRUE))
View(hflights)
?mean
hflights %>%
mutate(diff = TaxiOut - TaxiIn) %>%
filter(!is.na(diff)) %>%
summarise(avg = mean(diff))
hflights %>% filter(hflights, Dest=="DFW", DepTime < 800) %>% desc(hflights, AirTime)
hflights %>% filter(Dest=="DFW", DepTime < 800) %>% arrange(desc(AirTime))
View(hflights %>% filter(Dest=="DFW", DepTime < 800) %>% arrange(desc(AirTime)))
d <- hflights %>%
select(Dest, UniqueCarrier, Distance, ActualElapsedTime) %>%
mutate(RealTime = ActualElapsedTime + 100, mph = Distance / RealTime * 60)
d %>%
filter(!is.na(mph), mph < 70) %>%
summarise( n_less = n(),
n_dest = n_distinct(Dest),
min_dist = min(Distance),
max_dist = max(Distance))
hflights %>%
mutate(RealTime = ActualElapsedTime + 100, mph = Distance / RealTime * 60) %>%
filter(mph < 105 | Cancelled == 1 | Diverted == 1) %>%
summarise(n_non = n(),
n_dest = n_distinct(Dest),
min_dist = min(Distance),
max_dist = max(Distance))
hflights %>%
filter(!is.na(DepTime), !is.na(ArrTime), DepTime > ArrTime) %>%
summarise(num = n())
library(ggplot2)
str(mtcars)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
View(mtcars)
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = disp)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, size = disp)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, shape = disp)) +
geom_point()
str(diamonds)
?diamonds
ggplot(diamonds, aes(x = carat, y = price))  +
geom_point()
corr(diamonds, carat, price)
?corr
?cor
?cor(diamonds, carat, price)
cor(diamonds, carat, price)
?cor
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_smooth()
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
geom_smooth()
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
geom_point(alpha = 0.4)
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
geom_point(alpha = 0.05)
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))
dia_plot + geom_point()
dia_plot + geom_point(aes(col = clarity))
dia_plot + geom_point(aes(col = clarity))
set.seed(1)
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))
dia_plot <- dia_plot +
geom_point(alpha = 0.2)
dia_plot + geom_smooth(se = FALSE)
dia_plot + geom_smooth(aes(col = clarity), se = FALSE)
dia_plot + geom_smooth(se = FALSE)
dia_plot + geom_point(aes(col = clarity))
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))
?set.seed
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
mtcars$fcyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$fcyl)
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
carModel <- lm(mpg ~ wt, data = mtcars)
abline(carModel, lty = 2)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
legend(x = 5, y = 33, legend = levels(mtcars$cyl),
col = 1:3, pch = 1, bty = "n")
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
abline(lm(mpg ~ wt, data = mtcars), lty = 2)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
legend(x = 5, y = 33, legend = levels(mtcars$cyl),
col = 1:3, pch = 1, bty = "n")
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, linetype = 2)
load("C:/Users/cammillius.rj/Desktop/Study/AdvancedAnalyticsSessions/Data-Visualization-in-R-with-ggplot2/Data-Visualization-in-R-with-ggplot2/Data-Visualization-in-R-with-ggplot2/iris.RData")
glimpse(iris)
glimpse(iris.tidy)
glimpse(iris.wide)
glimpse(iris.wide2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_point(aes(x = Petal.Length, y = Petal.Width), col = "red")
ggplot(iris.wide, aes(x = Length, y = Width, col = Part)) +
geom_point()
ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
geom_jitter()
ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
geom_point()
ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
geom_jitter()
View(iris.tidy)
ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
geom_jitter() +
facet_grid(. ~ Measure)
library(tidyr)
install.packages("tidyr")
###Variables To Visuals, Part 1b
# Load the tidyr package
library(tidyr)
iris.tidy <- iris %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
head(iris)
head(iris.wide)
head(iris.tidy)
ggplot(iris.wide, aes(x = Length, y = Width, col = Part)) +
geom_jitter() +
facet_grid(. ~ Species)
iris$Flower <- 1:nrow(iris)
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
# 3 - Map wt to x, mpg to y and cyl to col
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point()
# Change shape and size of the points in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point(shape = 1, size = 4)
class(mtcars$am)
class(mtcars$cyl)
class(mtcars$wt)
# Given from the previous exercise
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point(shape = 1, size = 4)
# 1 - Map cyl to fill
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 1, size = 4)
# 2 - Change shape and alpha of the points in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 21, size = 4, alpha = 0.6)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl, col = am)) +
geom_point(shape = 21, size = 4, alpha = 0.6)
ggplot(mtcars, aes(x = wt, y = mpg, size = cyl)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, alpha = cyl)) +
geom_point()
# Map cyl to shape
ggplot(mtcars, aes(x = wt, y = mpg, shape = cyl)) +
geom_point()
# Map cyl to labels
ggplot(mtcars, aes(x = wt, y = mpg, label = cyl)) +
geom_text()
my_color <- "#4ABEFF"
# Set the color aesthetic
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point()
# Set the color aesthetic and attribute
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point(color = my_color)
# Set the fill aesthetic and color, size and shape attributes
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(size = 10, shape = 23, color = my_color)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(alpha = 0.5)
# Expand to draw points with shape 24 and color yellow
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 24, color = 'yellow')
# Expand to draw text with label x, color red and size 10
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_text(label = "x", color = 'red', size = 10)
###Going All Out
# Map mpg onto x, qsec onto y and factor(cyl) onto col
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl))) +
geom_point()
# Add mapping: factor(am) onto shape
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am))) +
geom_point()
# Add mapping: (hp/wt) onto size
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am), size = (hp/wt))) +
geom_point()
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am +
geom_bar()
cyl.am +
geom_bar(position = "fill")
cyl.am +
geom_bar(position = "dodge")
dia_plot <- dia_plot +
geom_point(alpha = 0.2)
dia_plot + geom_smooth(se = FALSE)
library(dplyr)
library(gapminder)
library(ggplot2)
install.packages("gapminder")
library(gapminder)
gap1992 <- gapminder %>% filter(year == 1992)
head(gap1992)
colnames(gap1992)
##run nrow() on gap1992
nrow(gap1992)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size=pop, color=continent)) +
geom_point() + ggtitle("Gapminder for 1992")
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, size=pop, color=continent)) +
geom_point() + ggtitle("Gapminder for 1992")
View(gap1992)
ggplot(data=gap1992,
mapping = aes(
x = log(gdpPercap),
y = lifeExp
)) +
geom_point()
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
geom_line()
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
geom_line() + geom_point()
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(continent) + FacetGrid(year)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(continent) + Facet(year)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(shape = continent) +
facet_grid(. ~ year)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(shape = continent) +
facet_grid(. ~ year)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
# Change to put pop on the x-axis and gdpPercap on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10()
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point() +
scale_x_log10()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ year)
gapminder %>%
group_by(continent, year) %>%
summarize(medianLifeExp = median(lifeExp),
maxGdpPercap = max(gdpPercap))
gapminder %>%
group_by(continent, year) %>%
summarize(medianLifeExp = median(lifeExp),
maxGdpPercap = max(gdpPercap))
ggplot(by_year, aes(x = year, y = medianLifeExp)) +
geom_point() +
expand_limits(y = 0)
by_year_continent <- gapminder %>%
group_by(continent, year) %>%
summarize(medianGdpPercap = median(gdpPercap))
ggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +
geom_point() +
expand_limits(y = 0)
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
ggplot(by_continent_2007, aes(x = medianGdpPercap, y = medianLifeExp, color = continent)) +
geom_point()
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
install.packages("googleAnalyticsR")
library(googleAnalyticsR)
ga_auth()
my_accounts <- google_analytics_account_list()
View(my_accounts)
my_id <- 56037355
start_date <- "2018-08-01"
end_date <- "2018-08-31"
df2 <- google_analytics_4(my_id,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date"))
df2 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date"))
View(df)
View(df2)
install.packages("RGA")
?RGA
authorize()
rga.open(instance = "ga")
install_github("rga", "skardhamar")
install.packages("devtools")
library(devtools)
install_github("rga", "skardhamar")
library(rga)
??rga
ga$getData(xxx,
start.date = "2015-03-30",
end.date = "2015-03-31",
metrics = "ga:totalEvents",
dimensions = "ga:date,ga:customVarValue4,ga:eventCategory,ga:eventAction,ga:eventLabel",
sort = "",
filters = "ga:deviceCategory==desktop",
segment = "",
,batch = TRUE, walk = TRUE
)
ga_data <- google_analytics_4(viewId = "[your view ID]",
date_range = c(Sys.Date()-7, Sys.Date()-1),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE)
View(ga_data)
?google_analytics
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
anti_sample_batches = "1")
library(googleAnalyticsR)
start_date <- "2018-08-31"
end_date <- "2018-08-01"
my_id <- 56037355
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
View(ga_data)
start_date <- "2018-08-01"
end_date <- "2018-08-31"
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
View(ga_data)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date", "",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
segments = NULL,
anti_sample_batches = 1)
library(googleAnalyticsR)
start_date <- "2018-08-01"
end_date <- "2018-08-31"
my_id <- 56037355
ga_data1 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data2 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
segments = NULL,
anti_sample_batches = 1)
View(ga_data1)
View(ga_data2)
install.packages("googleAuthR")
install.packages("googleAuthR")
install.packages("googleAuthR")
q()
install.packages("tensor")
remove.packages("tensor", lib="~/R/win-library/3.5")
devtools::install_github("rstudio/keras")
q()
?make_ga_4_req
??make_ga_4_req
today()
Sys.Date()
Sys.Date()-1
?date_range
??date_range
q()
library(swirl)
swirl()
data(cars)
??cars
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars, x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(Speed = cars$speed, y = cars$dist)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpt ~ cyl, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
getwd()
setwd("D:\Study&Learning\Coursera\DataScience")
setwd("D:/Study&Learning/Coursera/DataScience")
getwd()
read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
outcome <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
View(outcome)
head(outcome)
ncol(outcom)
ncol(outcome)
nrow(outcome)
names(outcome)
names <- list(names(outcome))
names
outcome <- read.csv("week4assignment-outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
View(hist(outcome[, 11]))
names(outcome[, 11])
colnames(outcom[11])
colnames(outcome[11])
q()
