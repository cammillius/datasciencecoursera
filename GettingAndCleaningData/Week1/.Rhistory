geom_point(size = 10, shape = 23, color = my_color)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(alpha = 0.5)
# Expand to draw points with shape 24 and color yellow
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 24, color = 'yellow')
# Expand to draw text with label x, color red and size 10
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_text(label = "x", color = 'red', size = 10)
###Going All Out
# Map mpg onto x, qsec onto y and factor(cyl) onto col
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl))) +
geom_point()
# Add mapping: factor(am) onto shape
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am))) +
geom_point()
# Add mapping: (hp/wt) onto size
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am), size = (hp/wt))) +
geom_point()
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am +
geom_bar()
cyl.am +
geom_bar(position = "fill")
cyl.am +
geom_bar(position = "dodge")
dia_plot <- dia_plot +
geom_point(alpha = 0.2)
dia_plot + geom_smooth(se = FALSE)
library(dplyr)
library(gapminder)
library(ggplot2)
install.packages("gapminder")
library(gapminder)
gap1992 <- gapminder %>% filter(year == 1992)
head(gap1992)
colnames(gap1992)
##run nrow() on gap1992
nrow(gap1992)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size=pop, color=continent)) +
geom_point() + ggtitle("Gapminder for 1992")
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, size=pop, color=continent)) +
geom_point() + ggtitle("Gapminder for 1992")
View(gap1992)
ggplot(data=gap1992,
mapping = aes(
x = log(gdpPercap),
y = lifeExp
)) +
geom_point()
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
geom_line()
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
geom_line() + geom_point()
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(continent) + FacetGrid(year)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(continent) + Facet(year)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(shape = continent) +
facet_grid(. ~ year)
ggplot(gap1992, aes(x = gdpPercap, y = lifeExp, size = pop, color = country) +
geom_point(shape = continent) +
facet_grid(. ~ year)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
# Change to put pop on the x-axis and gdpPercap on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10()
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point() +
scale_x_log10()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ year)
gapminder %>%
group_by(continent, year) %>%
summarize(medianLifeExp = median(lifeExp),
maxGdpPercap = max(gdpPercap))
gapminder %>%
group_by(continent, year) %>%
summarize(medianLifeExp = median(lifeExp),
maxGdpPercap = max(gdpPercap))
ggplot(by_year, aes(x = year, y = medianLifeExp)) +
geom_point() +
expand_limits(y = 0)
by_year_continent <- gapminder %>%
group_by(continent, year) %>%
summarize(medianGdpPercap = median(gdpPercap))
ggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +
geom_point() +
expand_limits(y = 0)
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
ggplot(by_continent_2007, aes(x = medianGdpPercap, y = medianLifeExp, color = continent)) +
geom_point()
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
by_continent_2007 <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(medianGdpPercap = median(gdpPercap),
medianLifeExp = median(lifeExp))
install.packages("googleAnalyticsR")
library(googleAnalyticsR)
ga_auth()
my_accounts <- google_analytics_account_list()
View(my_accounts)
my_id <- 56037355
start_date <- "2018-08-01"
end_date <- "2018-08-31"
df2 <- google_analytics_4(my_id,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date"))
df2 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date"))
View(df)
View(df2)
install.packages("RGA")
?RGA
authorize()
rga.open(instance = "ga")
install_github("rga", "skardhamar")
install.packages("devtools")
library(devtools)
install_github("rga", "skardhamar")
library(rga)
??rga
ga$getData(xxx,
start.date = "2015-03-30",
end.date = "2015-03-31",
metrics = "ga:totalEvents",
dimensions = "ga:date,ga:customVarValue4,ga:eventCategory,ga:eventAction,ga:eventLabel",
sort = "",
filters = "ga:deviceCategory==desktop",
segment = "",
,batch = TRUE, walk = TRUE
)
ga_data <- google_analytics_4(viewId = "[your view ID]",
date_range = c(Sys.Date()-7, Sys.Date()-1),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE)
View(ga_data)
?google_analytics
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
anti_sample_batches = "1")
library(googleAnalyticsR)
start_date <- "2018-08-31"
end_date <- "2018-08-01"
my_id <- 56037355
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
View(ga_data)
start_date <- "2018-08-01"
end_date <- "2018-08-31"
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","pageviews"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
View(ga_data)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date", "",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
segments = NULL,
anti_sample_batches = 1)
library(googleAnalyticsR)
start_date <- "2018-08-01"
end_date <- "2018-08-31"
my_id <- 56037355
ga_data1 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
anti_sample = TRUE,
segments = NULL,
anti_sample_batches = 1)
ga_data2 <- google_analytics(my_id,
date_range = c(start_date, end_date),
metrics = c("users", "sessions","goal20Completions"),
dimensions = "date",
segments = NULL,
anti_sample_batches = 1)
View(ga_data1)
View(ga_data2)
install.packages("googleAuthR")
install.packages("googleAuthR")
install.packages("googleAuthR")
q()
install.packages("tensor")
remove.packages("tensor", lib="~/R/win-library/3.5")
devtools::install_github("rstudio/keras")
q()
?make_ga_4_req
??make_ga_4_req
today()
Sys.Date()
Sys.Date()-1
?date_range
??date_range
q()
library(swirl)
swirl()
data(cars)
??cars
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars, x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(Speed = cars$speed, y = cars$dist)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpt ~ cyl, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
getwd()
setwd("C:/All-Files/Study&Learning/Udemy/Data Science Academy Master Data Science in R/Section1.4")
install.packages("httr")
library(httr)
r <- GET("https://www.nabler.com")
r
View(r\)
View(r)
r[["status_code"]]
r[["headers"]][["server"]]
r[["request"]]
data <- read.table("week4assignment-outcome-of-care-measures.csv", header = TRUE, sep = ",", na.strings = "NA", stringsAsFactors = FALSE)
data <- data[, c(which(colnames(data) == "Hospital.Name"),
which(colnames(data) == "State"),
which(colnames(data) == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"),
which(colnames(data) == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"),
which(colnames(data) == "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))]
colnames(data) <- c("hospital.name", "State", "heart.attack", "heart.failure", "pneumonia")
data[data == "Not Available"] <- NA
data$heart.attack <- as.numeric(data$heart.attack)
data$heart.failure <- as.numeric(data$heart.failure)
data$pneumonia <- as.numeric(data$pneumonia)
statelist <- unique(data$State)
outcomelist <- c("heart attack", "heart failure", "pneumonia")
# Check that state and outcome are valid
state <- "AL"
outcome <- "heart attack"
num <- "best"
if(state %in% statelist == FALSE) {
stop("invalid state")
} else if(outcome %in% outcomelist == FALSE) {
stop("invalid outcome")
# If the state and outcome are valid, continue with the program
} else {
# Choose the outcome column to take, subset to the required columns and remove NAs
if(outcome == "heart attack") {
outcomecol <- "heart.attack"
finaldata <- data[, c(1, 2, 3)]
finaldata <- finaldata[complete.cases(finaldata$heart.attack), ]
} else if(outcome == "heart failure") {
outcomecol <- "heart.failure"
finaldata <- data[, c(1, 2, 4)]
finaldata <- finaldata[complete.cases(finaldata$heart.failure), ]
} else {
outcomecol <- "pneumonia"
finaldata <- data[, c(1, 2, 5)]
finaldata <- finaldata[complete.cases(finaldata$pneumonia), ]
}
# Changing best, worst and number function inputs to proper format
if(num == "best") {
num <- 1
} else if(num == "worst") {
num <- nrow(finaldata)
} else if(class(num == "numeric") == TRUE) {
num <- num
}
# Split the data set by state
splitbystate <- split(finaldata, finaldata$State)
View(splitbystate)
ans <- lapply(splitbystate, function(x, num) {
x <- x[order(x[, 3], x$hospital.name), ]
}, num)
View(ans)
return(data.frame(hospital = unlist(ans), state = names(ans)))
}
if(num == "best") {
num <- 1
} else if(num == "worst") {
num <- nrow(finaldata)
} else if(class(num == "numeric") == TRUE) {
num <- num
}
splitbystate <- split(finaldata, finaldata$State)
View(splitbystate)
splitbystate <- split(finaldata, finaldata$State)
if(outcome == "heart attack") {
outcomecol <- "heart.attack"
finaldata <- data[, c(1, 2, 3)]
finaldata <- finaldata[complete.cases(finaldata$heart.attack), ]
} else if(outcome == "heart failure") {
outcomecol <- "heart.failure"
finaldata <- data[, c(1, 2, 4)]
finaldata <- finaldata[complete.cases(finaldata$heart.failure), ]
} else {
outcomecol <- "pneumonia"
finaldata <- data[, c(1, 2, 5)]
finaldata <- finaldata[complete.cases(finaldata$pneumonia), ]
}
if(num == "best") {
num <- 1
} else if(num == "worst") {
num <- nrow(finaldata)
} else if(class(num == "numeric") == TRUE) {
num <- num
}
splitbystate <- split(finaldata, finaldata$State)
requiredPackages <- c("googleAnalyticsR", "tidyr", "dplyr", "openxlsx", "XLConnect")
version()
version
library(fractribution.data)
library(fractribution.model)
path_customer_map
View
View(path_customer_map)
example_path_customer_map
head(example_path_summary)
fractional_attribution <- attribution_fit(example_path_summary)
fractional_attribution <- attribution_fit(example_path_summary, path_level_only = T)
View(fractional_attribution)
install.packages("Forecast")
Y
install.packages("forecast")
install.packages("lubridate")
install.packages("dplyr")
install.packages("ttr")
install.packages("TTR")
install.packages("DMWR")
install.packages("DMwR")
install.packages("Tseries")
install.packages("tseries")
exit
q()
if(require(forecast)){library(forecast)} else {install.packages("forecast");library(forecast)}
if(require(tseries)){library(tseries)} else {install.packages("tseries");library(tseries)}
if(require(aTSA)){library(aTSA)} else {install.packages("aTSA");library(aTSA)}
if(require(plotly)){library(plotly)} else {install.packages("plotly");library(plotly)}
if(require(Hmisc)){library(Hmisc)} else {install.packages("Hmisc");library(Hmisc)}
if(require(dplyr)){library(dplyr)} else {install.packages("dplyr");library(dplyr)}
library(knitr)
library(tm)
library(forecast)
data<-read.csv(file.choose(),header=T,na.strings = c(""," "),stringsAsFactors = F)
data<-read.csv(file.choose(),header=T,na.strings = c(""," "),stringsAsFactors = F)
data$Month <- factor(data$Month, levels = data[["Month"]])
#Splitting into test and train by logical split by seasonality (for example, complete year)
data_train<-data[1:72,2]
data_test<-data[73:84,2]
#Converting data to a time-series
volume_ts<-ts(data_train,start = c(2009,1),end=c(2014,12),frequency = 12)
# Decomposing to look at the seasonal, trend and irregular components
comp <- stl(volume_ts, s.window = "periodic")
plot(comp)
plot.ts(volume_ts)
# Performing a Unit Root Test - Augmented Dickey Fuller (ADF) test
tseries::adf.test(volume_ts)
tseries::adf.test(diff(volume_ts,differences = 1))
plot(diff(volume_ts),ylab="Differenced",type="l")
# Decomposing to look at the seasonal, trend and irregular components
comp <- stl(volume_ts, s.window = "periodic")
plot(comp)
plot.ts(volume_ts)
# Performing a Unit Root Test - Augmented Dickey Fuller (ADF) test
tseries::adf.test(volume_ts)
tseries::adf.test(diff(volume_ts,differences = 1))
diff(volume_ts)
?tseries
??tseries
?adf.test
install.packages("rvest")
library(rvest)
?httr::status_code()
getwd()
setwd("C:\\All-Files\\Study&Learning\\Coursera\\DataScience\\GettingAndCleaningData\\Week1")
file.exists("Week1")
setwd("../")
getwd()
file.exists("Week1")
# setwd() is used to assign / change the current working directory. For example:
setwd("C:\\All-Files\\Study&Learning\\Coursera\\DataScience\\GettingAndCleaningData\\Week1")
# file.exists() checks if a folder
file.exists("20200225_Week1.R")
?download.file
download.file("https://projects.iq.harvard.edu/files/hpca/files/main_conflict_table.xls", "data.xls")
fileURL <- "https://projects.iq.harvard.edu/files/hpca/files/main_conflict_table.xls"
download.file(url = fileURL, destfile = "data.xls", method = "curl")
fileURL <- "https://projects.iq.harvard.edu/files/hpca/files/main_conflict_table.xls"
download.file(url = fileURL, destfile = "data.xls", method = "curl")
fileURL <- "https://projects.iq.harvard.edu/files/hpca/files/main_conflict_table.xls"
download.file(url = fileURL, destfile = "data.xls", method = "curl")
# list.files() lists all files and sub-folders in a folder:
list.files("./Week1")
# list.files() lists all files and sub-folders in a folder:
list.files()
# list.files() lists all files and sub-folders in a folder:
list.files("C:\\All-Files\\Study&Learning\\Coursera\\DataScience\\GettingAndCleaningData\\Week1")
download.file(url = fileURL, destfile = "data.xls", method = "curl", quiet = TRUE)
download.file(url = fileURL, destfile = "data.xls", method = "curl", quiet = TRUE, internet.info(0))
download.file(url = fileURL, destfile = "data.xls", method = "curl", internet.info(0))
download.file(url = fileURL, destfile = "data.xls", method = "internal", internet.info(0))
download.file(url = fileURL, destfile = "data.xls", method = "internal", internet.info = 0
)
download.file(url = fileURL, destfile = paste("data.xls", date()), method = "curl") # Method needs to be set as curl for https sites.
download.file(url = fileURL, destfile = paste("data", date(), ".xls"), method = "curl") # Method needs to be set as curl for https sites.
download.file(url = fileURL, destfile = paste("data", as.character(date()), ".xls"), method = "curl") # Method needs to be set as curl for https sites.
download.file(url = fileURL, destfile = paste("data", as.character(date()), ".xls", sep = ""), method = "curl") # Method needs to be set as curl for https sites.
download.file(url = fileURL, destfile = paste("data", gsub(as.character(date()), pattern = ":", "-"), ".xls", sep = ""), method = "curl") # Method needs to be set as curl for https sites.
date()
gsub(as.character(date()), pattern = ":", "-")
as.character(date())
gsub(as.character(date()), pattern = "\:", "\-")
gsub(as.character(date()), pattern = "\\:", "\\-")
gsub(as.character(date()), pattern = ":", "-")
gsub(gsub(as.character(date()), pattern = ":", "-"), " ", "")
gsub(as.character(date()), pattern = " ", "")
gsub(as.character(date()), pattern = " ", replacement = "")
download.file(url = fileURL, destfile = paste("data", gsub(as.character(date()), pattern = ":", replacement = "-"), ".xls", sep = ""), method = "curl") # Method needs to be set as curl for https sites.
download.file(url = fileURL, destfile = paste("data", "-downloadedon", gsub(as.character(date()), pattern = ":", replacement = "-"), ".xls", sep = ""), method = "curl") # Method needs to be set as curl for https sites.
data <- read.table("data-csv.csv")
data <- read.table("data-csv.csv")
getwd()
head(data)
head(data)
data <- read.table("data-csv.csv", sep = ",", header = TRUE)
head(data)
